name: "Get the Latest App name from Sauce Labs"
description: "Call the Sauce Labs API to get all the apps uploaded, then get the lastest filename for the platform being tested"
author: "sheldon.regular@gmail.com"
inputs:
  DEVICE_CLOUD_USER:
    description: "Username for the Device Cloud Service"
    required: true
  DEVICE_CLOUD_KEY:
    description: "Access Key for the Device Cloud Service"
    required: true
  MOBILE_PLATFORM:
    description: "Mobile Platform to Test Against. One of ios or android"
    required: false
    default: "android"
  SAUCE_LABS_REGION:
    description: "Sauce Labs Region for the api call to get apps"
    required: false
    default: "us-west-1"
  LAST_KNOWN_LATEST_APP_FILE:
    description: "relative location and file name of the file that hold the json for the last latest app retreived from Sauce Labs"
    required: false
    default: ".github/workflows/bc_wallet/latest_app.json"
runs:
  using: "composite"
  steps:
    - name: get-latest-app-name
      uses: BSFishy/pip-action@v1
      with:
        packages: |
          requests
      run: |
        import os
        import json
        import requests
        import os
        from pathlib import Path

        # Make these parameters on the script. 
        local_latest_app_json_filename = ${{ inputs.LAST_KNOWN_LATEST_APP_FILE }}
        platform = ${{ inputs.MOBILE_PLATFORM }}
        sl_region = ${{ inputs.SAUCE_LABS_REGION }}
        sl_user = ${{ inputs.DEVICE_CLOUD_USER }}
        sl_key = ${{ inputs.DEVICE_CLOUD_KEY }}

        def find_latest_app(resp_json, platfrom):
          latest_app = None
          for item in resp_json["items"]:
              if latest_app == None == None or item['upload_timestamp'] > latest_app['upload_timestamp']:
                  latest_app = item
          return latest_app

        # call api to get app json
        resp = requests.get(f'https://api.{sl_region}.saucelabs.com/v1/storage/files', auth=(sl_user, sl_key))
        resp_json = resp.json()

        # traverse app json to get the lastest upload_timestamp for the platform(kind)
        if resp.status_code == 200:
            latest_app_json = find_latest_app(resp_json, platform)
        else:
            raise Exception(f"There was a problem getting the list of available apps in Sauce Labs: {resp_json}")

        local_latest_app_json_file = Path(local_latest_app_json_filename)
        local_latest_app_json_file.touch(exist_ok=True)
        if os.stat(local_latest_app_json_filename).st_size != 0: # It's not new
            with open(local_latest_app_json_file) as infile:
                local_latest_app_file_json = json.load(infile)
                if latest_app_json['upload_timestamp'] > local_latest_app_file_json['upload_timestamp']:
                    # Save the file
                    with open(local_latest_app_json_filename, 'w') as outfile:
                        #outfile.write(json.dumps(infile))
                        json.dump(latest_app_json, outfile)
        else: # It's new just use the latest app found
            with open(local_latest_app_json_filename, 'w') as outfile:
                json.dump(latest_app_json, outfile)

      shell: python
      working-directory: aries-mobile-test-harness
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
      with:
        path: aries-mobile-test-harness
        committer: "Sheldon Regular <sheldon.regular@gmail.com>"
        signoff: true
        branch: amth-bc-latest-app
branding:
  icon: "mic"
  color: "purple"
