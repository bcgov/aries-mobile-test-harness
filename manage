#!/bin/bash
# set -x

# Set of valid agents - add new agents here
export VALID_AGENTS=$(ls agents/*/Dockerfile.* | sed "s/^.*file.//" |  tr "\n" " " | sort -u)

# Set of valid wallets - Looks in aries-mobile-tests/pageobjects for folders containing wallet page objects
export VALID_WALLETS=$(ls -d aries-mobile-tests/pageobjects/*/ | awk -F'/' '{ a = length($NF) ? $NF : $(NF-1); print a }' | tr "\n" " " | sort -u)

export MSYS_NO_PATHCONV=1
# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-amth}"
export AGENT_TIMEOUT=30
export LEDGER_TIMEOUT=60
# these two can be overrode via env vars
export LEDGER_URL_CONFIG="${LEDGER_URL_CONFIG}"
export TAILS_SERVER_URL_CONFIG="${TAILS_SERVER_URL_CONFIG}"

# always use ngrok for mobile testing
export USE_NGROK="true"


# these are derived from the above two
LEDGER_URL_HOST="${LEDGER_URL_CONFIG:-http://localhost:9000}"
LEDGER_URL_INTERNAL="${LEDGER_URL_CONFIG:-http://${DOCKERHOST}:9000}"
TAILS_SERVER_URL_HOST="${TAILS_SERVER_URL_CONFIG:-http://localhost:6543}"
TAILS_SERVER_URL_INTERNAL="${TAILS_SERVER_URL_CONFIG:-http://${DOCKERHOST}:6543}"
#CLOUD_AGENCY_URL="${CLOUD_AGENCY_URL:-http://localhost:8000}"
# important: inside the internal URLs, we replace "://localhost:" with "://${DOCKERHOST}:"
#   so it works inside docker.
LEDGER_URL_INTERNAL="$(echo ${LEDGER_URL_INTERNAL} | sed "s/:\/\/localhost:/:\/\/${DOCKERHOST}:/" )"
TAILS_SERVER_URL_INTERNAL="$(echo ${TAILS_SERVER_URL_INTERNAL} | sed "s/:\/\/localhost:/:\/\/${DOCKERHOST}:/" )"
#CLOUD_AGENCY_URL_INTERNAL="$(echo ${CLOUD_AGENCY_URL} | sed "s/:\/\/localhost:/:\/\/${DOCKERHOST}:/" )"

# Running on Windows?
if [[ "$OSTYPE" == "msys" ]]; then
  # Prefix interactive terminal commands ...
  terminalEmu="winpty"
fi

export INTERACTIVE="-it"
if [[ "$NO_TTY" == "1" ]]; then
  unset INTERACTIVE
fi

#Running on Play with Docker?
if [ "${PWD_HOST_FQDN}" != "" ]; then
  if [ "${PWD_HOST_FQDN}" == "labs.play-with-docker.com" ]; then
    export ETH_CONFIG="eth1"
  elif [ "${PWD_HOST_FQDN}" == "play-with-docker.vonx.io" ]; then
    export ETH_CONFIG="eth0"
  else
    export ETH_CONFIG="eth0"
  fi
  myhost=`ifconfig ${ETH_CONFIG} | grep inet | cut -d':' -f2 | cut -d' ' -f1 | sed 's/\./\-/g'`
  if [ "${GENESIS_URL}" == "" ]; then
    export GENESIS_URL="http://ip${myhost}-${SESSION_ID}-9000.direct.${PWD_HOST_FQDN}/genesis"
  fi
  # Check if von-network is running
  # Should this be moved out of the Play with Docker section?
  if [ "${1}" == "run" ]; then
    curl -s ${GENESIS_URL} > /dev/null
    res=$?
    if test "$res" != "0"; then
      echo "Error: Unable to find the genesis file for the Indy Network"
      echo "Is von-network running?"
      echo GENESIS_URL: ${GENESIS_URL}
      exit 1
    fi
  fi
fi

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build [ -w wallet ] [ -i/v agent ]*
    Build the docker images for the issuer and verifier agents and the mobile test harness.
      You need to do this first.
      - "wallet" must be specified based off of the name given to the set of page objects in the pageobjects folder. eg. "bifold". 
      This copies only the wallets related pageobjects and tests into the container.
      - "agent" must be one from the supported list: ${VALID_AGENTS}

    Examples:
    $0 build -w bifold -i acapy-main -v acapy-main  - Build the Aries Mobile Test harness to test bifold, use acapy-main as the issuer and the verifier.

  rebuild [ -w wallet ] [ -i/v agent ]*
    Same as build, but adds the --no-cache option to force building from scratch

  run [ -r allure ] [ -d <device cloud> ] [ -u <device cloud username> ] [ -k <device cloud key> ] [ -p platform ] [ -a <app name> ] [ -i <issuer agent> ] [ -v <verifier agent> ] [ -t tags ]*
    Run the tagged tests using the specified Wallet using specified issuer and verifier agents.
      Select the agents for the roles of Issuer (-i) and Verifier (-v).
      - The value for agent must be one of: ${VALID_AGENTS}
      Use -t option(s) to indicate tests with the gives tag(s) are to be executed.
        -t options can NOT have spaces, even if the option is quoted; use a behave INI file instead (-i option)
        For not running tagged tests, specify a ~ before the tag, e.g. "-t ~@wip" runs tests that don't have the "@wip" tag
      Use -d to specify the Device Cloud Service to be used, SauceLabs is currently supported
        "-d SauceLabs"
      Use -u to specify the username for the given device cloud service.
      Use -k to specify the access key for the given device cloud service.
      Use -p to specify the mobile device platform
        "-p iOS" or "-p Android"
      Use -a to specify the app name or id of the app loaded into the device cloud service
      Use -i to specify the issuer to use in the tests
        Currenty supporting acapy-main
      Use -v to specify the verifier to use in the tests
        Currenty supporting acapy-main
      Use the -r option to output to allure
        (allure is the only supported option)
LEDGER_URL_CONFIG=http://test.bcovrin.vonx.io REGION=us-west-1 

    Examples:
    $0 run -d SauceLabs -u oauth-my.username-35de1 -k 4dba5e68-16c1-4632-b44e-4a543601610d -p Android -a app-release.apk -i acapy-main -v acapy-main -t @Connect
      - Run all tests tagged with Connect on SauceLabs with the app-release.apk app on the android platform. Use acapy-main as the basis for the issuer and verifier. 

  tags - Get a list of the tags on the features tests

  tests - Get a list of the test scenarios in the features, including the associated tags
EOF
exit 1
}
  # scenarios - synonym for tests, but longer and harder to spell

  # service [start|stop|logs|clean] service-name
  #   Run the given service command on the given service. Commands:
  #     - start: start the service, creating the AATH docker network if necessary.
  #     - stop: stop the service, deleting the AATH docker network if it's now unused.
  #     - logs: print the scrolling logs of the service. Ctrl-C to exit.
  #     - clean: clean up the service containers and build files, if any.

  # start [ -a/b/f/m/d agent ]* [-n]
  #   Initialize the test harness using the specified agents for Acme, Bob, Faber and Mallory.
  #     Select the agents for the roles of Acme (-a), Bob (-b), Faber (-f) and Mallory (-m).
  #     - For all to be set to the same, use "-d" for default.
  #     - The value for agent must be one of: ${VALID_AGENTS}
  #   Use the -n option to start ngrok endpoints for each agent
  #       (this is *required* when testing with a Mobile agent)

  # stop - stop the test harness.

  # rebuild - Rebuild the docker images.

  # dockerhost - Print the ip address of the Docker Host Adapter as it is seen by containers running in docker.


# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

function echoRed (){
  _msg="${@}"
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function initDockerBuildArgs() {
  dockerBuildArgs=""

  # HTTP proxy, prefer lower case
  if [[ "${http_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${http_proxy}"
  else
    if [[ "${HTTP_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg http_proxy=${HTTP_PROXY}"
    fi
  fi

  # HTTPS proxy, prefer lower case
  if [[ "${https_proxy}" ]]; then
    dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${https_proxy}"
  else
    if [[ "${HTTPS_PROXY}" ]]; then
      dockerBuildArgs=" ${dockerBuildArgs} --build-arg https_proxy=${HTTPS_PROXY}"
    fi
  fi

  echo ${dockerBuildArgs}
}

function initEnv() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift
    case "$arg" in
      *=*)
        export "${arg}"
        ;;
      *)
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  export LOG_LEVEL=${LOG_LEVEL:-info}
  export RUST_LOG=${RUST_LOG:-warning}
}

# TODO: set up image builds so you don't need to use `./manage rebuild` to refresh remote source repo
# - image Dockerfile has an ARG for the commit hash,
# - build script grabs the HEAD commit hash from the agent's github repo

# Build images -- add more agents here...
# TODO: Define args to build only what's needed
buildImages() {
  args=${@}

  echo "Agents to build: Issuer:${ISSUER_AGENT}, Verifier:${VERIFIER_AGENT}"

  for agent in ${BUILD_AGENTS}; do
    export AGENT_FOLDER=$(dirname "$(find agents -name *.${agent})" )
    echo Agent Folder: ${AGENT_FOLDER}
    if [ -e "${AGENT_FOLDER}/Dockerfile.${agent}" ]; then
      echo "Building ${agent}-agent ..."
      local REPO_ARGS
      REPO_ARGS=
      if [[ -f "${AGENT_FOLDER}/${agent}.repoenv" ]]; then
        source "${AGENT_FOLDER}/${agent}.repoenv"
        if [[ -n "${REPO_URL}" ]]; then
          local REPO_COMMIT
          if [[ -z ${REPO_BRANCH} ]]; then
            REPO_BRANCH=HEAD
          fi
          REPO_COMMIT=$(git ls-remote ${REPO_URL} ${REPO_BRANCH} | cut -f1)
          REPO_ARGS="--build-arg REPO_URL=${REPO_URL} --build-arg REPO_COMMIT=${REPO_COMMIT}"
        fi
      fi

      if ! docker build \
        ${args} \
        $(initDockerBuildArgs) \
        ${REPO_ARGS} \
        -t "${agent}-agent" \
        -f "${AGENT_FOLDER}/Dockerfile.${agent}" "agents/"; then
          echo "Docker image build failed."
          exit 1
      fi
    else
      echo "Unable to find Dockerfile to build agent: ${agent}"
      echo "Must be one one of: ${VALID_AGENTS}"
    fi
  done

  echo "Building aries-mobile-test-harness ..."
  if ! docker build \
    ${args} \
    $(initDockerBuildArgs) \
    -f 'aries-mobile-tests/Dockerfile.harness' \
    -t 'aries-mobile-test-harness' '.'; then
      echo "Docker image build failed."
      exit 1
  fi
}

pingLedger(){
  ledger_url=${1}

  # ping ledger web browser for genesis txns
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${ledger_url}/genesis)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForLedger(){
  (
    # Wait for ledger server to start ...
    local startTime=${SECONDS}
    local rtnCd=0
    printf "waiting for ledger to start"
    # use ledger URL from host
    while ! pingLedger "$LEDGER_URL_HOST"; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nThe Indy Ledger failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

pingTailsServer(){
  tails_server_url=${1}

  # ping tails server (ask for a non-existant registry and should return 404)
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${tails_server_url}/404notfound)
  if (( ${rtnCd} == 404 )); then
    return 0
  else
    return 1
  fi
}

waitForTailsServer(){
  (
    # Wait for tails server to start ...
    local startTime=${SECONDS}
    local rtnCd=0
    printf "waiting for tails server to start"
    # use tails server URL from host
    while ! pingTailsServer "$TAILS_SERVER_URL_HOST"; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nThe tails server failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

pingCloudAgency(){
  cloud_agency_url=${1}

  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null ${cloud_agency_url})
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

pingUniresolver(){

  # ping uniresolver server
  local rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null http://localhost:8080)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForCloudAgency(){
  (
    # Wait for cloud agency to start ...
    local startTime=${SECONDS}
    local rtnCd=0
    printf "waiting for cloud agency to start"
    while ! pingCloudAgency "$CLOUD_AGENCY_URL"; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nThe agency failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

waitForUniresolver(){
  (
    # Wait for uniresolver to start ...
    local startTime=${SECONDS}
    local rtnCd=0
    printf "waiting for uniresolver to start"
    while ! pingUniresolver ; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${LEDGER_TIMEOUT} )); then
        echoRed "\nUniversal Resolver failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

dockerhost_url_templates() {
  # generate acapy plugin config file, writing $DOCKERHOST into URLs
  pushd ${SCRIPT_HOME}/agents/acapy/ > /dev/null

  mkdir -p .build/acapy-main.data
  mkdir -p .build/acapy.data

  sed "s/REPLACE_WITH_DOCKERHOST/${DOCKERHOST}/g" plugin-config.template | tee > .build/plugin-config.yml

  rm -f .build/acapy-main.data/plugin-config.yml .build/acapy.data/plugin-config.yml
  cp .build/plugin-config.yml .build/acapy-main.data/plugin-config.yml
  mv .build/plugin-config.yml .build/acapy.data/plugin-config.yml

  popd > /dev/null
}

pingAgent(){
  name=${1}
  port=${2}

  # ping agent using a backchannel-exposed api
  rtnCd=$(curl -s --write-out '%{http_code}' --output /dev/null http://localhost:${port}/agent/command/status/)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForAgent(){
  (
    name=${1}

    # Wait for agent to start ...
    local startTime=${SECONDS}
    rtnCd=0
    printf "waiting for ${name} agent to start"
    while ! pingAgent ${@}; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${AGENT_TIMEOUT} )); then
        echoRed "\nThe agent failed to start within ${duration} seconds.\n"
        rtnCd=1
        break
      fi
      sleep 1
    done
    echo
    return ${rtnCd}
  )
}

startAgent() {
  local NAME=$1
  local CONTAINER_NAME=$2
  local IMAGE_NAME=$3
  local PORT_RANGE=$4
  local AGENT_PORT=$5
  local AGENT_ENDPOINT_PORT=$6
  local AIP_CONFIG=$7
  local AGENT_NAME=$8

  local AGENT_DIR=$(dirname "$(find agents -name *.${AGENT_NAME})" )

  local ENV_PATH="$(find $AGENT_DIR -name *${AGENT_NAME}.env)"
  local ENV_FILE_ARG=

  if [[ -n $ENV_PATH ]]; then
    ENV_FILE_ARG="--env-file=$ENV_PATH"
    # echo $ENV_FILE_ARG
  fi

  local DATA_VOLUME_PATH="$(find $AGENT_DIR -wholename */${AGENT_NAME}.data)"
  local DATA_VOLUME_ARG=
  # optional data volume folder
  if [[ -n DATA_VOLUME_PATH  ]]; then
    DATA_VOLUME_ARG="-v $(pwd)/$DATA_VOLUME_PATH:/data-mount:z"
  fi

  if [ ! "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
    if [[ "${USE_NGROK}" = "true" ]]; then
      echo "Starting ngrok for ${NAME} Agent ..."
      docker run -d --rm --name "${CONTAINER_NAME}-ngrok" wernight/ngrok ngrok http "${CONTAINER_NAME}:${AGENT_ENDPOINT_PORT}" --log stdout > /dev/null
      sleep 1
      export NGROK_NAME="${CONTAINER_NAME}-ngrok"
      docker network connect amth_network "${CONTAINER_NAME}-ngrok"
    else
      export NGROK_NAME=
    fi
    echo "Starting ${NAME} Agent using ${IMAGE_NAME} ..."
    export AGENT_EXTRA_ARGS_NAME="AGENT_EXTRA_${AGENT_NAME//-/_}"
    export AGENT_EXTRA_ARGS=`echo ${!AGENT_EXTRA_ARGS_NAME}`
    local container_id=$(docker run -dt --name "${CONTAINER_NAME}" --expose "${PORT_RANGE}" -p "${PORT_RANGE}:${PORT_RANGE}" ${DATA_VOLUME_ARG} ${ENV_FILE_ARG} -e "NGROK_NAME=${NGROK_NAME}" -e "EXTRA_ARGS=${AGENT_EXTRA_ARGS}" -e "DOCKERHOST=${DOCKERHOST}" -e "AGENT_NAME=${NAME}" -e "LEDGER_URL=${LEDGER_URL_INTERNAL}" -e "TAILS_SERVER_URL=${TAILS_SERVER_URL_INTERNAL}" -e "CLOUD_AGENCY_URL=${CLOUD_AGENCY_URL_INTERNAL}" -e "AIP_CONFIG=${AIP_CONFIG}" "${IMAGE_NAME}" -p "${AGENT_PORT}" -i false)
    sleep 1
    if [[ "${USE_NGROK}" = "true" ]]; then
      docker network connect amth_network "${CONTAINER_NAME}"
    # if [[ "${IMAGE_NAME}" = "mobile-agent-backchannel" ]]; then
    #   echo "Tail-ing log files for ${NAME} agent in ${container_id}"
    #   docker logs -f ${container_id} &
    fi
  else
    echo "${NAME} Agent already running, skipping..."
  fi
}

# Write some of the info in the appium/Sauce Labs config.json
modifyConfigJson() {
  # if Platform is iOS, use the iOS.config.json
  if [[ "${DEVICE_PLATFORM}" == "iOS" ]]; then
    # copy the iOS config.json
    cp ./aries-mobile-tests/sl_ios_config.json ./aries-mobile-tests/config.json
  fi
    
  # If Platform is Android, use the Android.config.json
  if [[ "${DEVICE_PLATFORM}" == "Android" ]]; then
    # copy the Android config.json
    cp ./aries-mobile-tests/sl_android_config.json ./aries-mobile-tests/config.json
  fi

  contents="$(jq --arg DEVICE_PLATFORM "${DEVICE_PLATFORM}" '.capabilities |= . + { "platformName": $DEVICE_PLATFORM }' ./aries-mobile-tests/config.json)" && \
  echo "${contents}" > ./aries-mobile-tests/config.json

  # contents="$(jq '.capabilities |= . + { "platformName": ${DEVICE_PLATFORM} }' ./aries-mobile-tests/config.json)" && \
  # echo "${contents}" > ./aries-mobile-tests/config.json

  contents="$(jq --arg APP_NAME "storage:filename=${APP_NAME}" '.capabilities |= . + { "app": $APP_NAME }' ./aries-mobile-tests/config.json)" && \
  echo "${contents}" > ./aries-mobile-tests/config.json

  # contents="$(jq '.capabilities |= . + { "appium:platformName": "storage:filename=${APP_NAME}" }' ./aries-mobile-tests/config.json)" && \
  # echo "${contents}" > config.json

  export DEVICE=$(echo $contents | jq -r '(.capabilities |= . "deviceName")[]')
  export OS_VERSION=$(echo $contents | jq -r '(.capabilities |= . "platformVersion")[]')

  #docker cp ./aries-mobile-tests/config.json aries-mobile-test-harness:/aries-mobile-test-harness/aries-mobile-tests/config.json
}

# Write properties like 
# platform
# device(s)
# OS Version(s)
# Wallet
# Issuer 
# Verifier
writeEnvProperties() {
  # ISSUER_VERSION=$(getAgentVersion 9020)
  # VERIFIER_VERSION=$(getAgentVersion 9030)
  # HOLDER_VERSION=$(getWalletVersion 9040)

  env_file="$(pwd)/aries-mobile-tests/allure/allure-results/environment.properties"
  declare -a env_array
  env_array+=("device.cloud.service=$DEVICE_CLOUD")
  env_array+=("app=$APP_NAME")
  env_array+=("role.issuer=$ISSUER_AGENT")
  #env_array+=("issuer.agent.version=$ISSUER_VERSION")
  env_array+=("role.verifier=$VERIFIER_AGENT")
  #env_array+=("verifier.agent.version=$VERIFIER_VERSION")
  env_array+=("platform=$DEVICE_PLATFORM")
  env_array+=("device=$DEVICE")
  env_array+=("device.os=$OS_VERSION")
  env_array+=("execution.tags=$TAGS")
  printf "%s\n" "${env_array[@]}" > $env_file

}

# TODO Not sure we need this in the Mobile Test Harness
getAgentVersion(){
  port=${1}
  # get agent version using a backchannel-exposed api
  version=$(curl -s http://localhost:${port}/agent/command/version/)
  echo "$version"
  # if (( ${rtnCd} == 200 )); then
  #   echo "$version"
  # else
  #   echo "unknown"
  # fi
}

# TODO Do we need this for Mobile? 
createNetwork() {
  if [[ -z `docker network ls -q --filter "name=amth_network"` ]]; then
    docker network create amth_network > /dev/null
  fi
}

# TODO Will only need this if we keep createNetwork() above
cleanupNetwork() {
  if [[ -z `docker ps -q --filter "network=amth_network"` && `docker network ls -q --filter "name=amth_network"` ]]; then
    docker network rm amth_network > /dev/null
  fi
}

# TODO Probably don't need this for mobile
auxiliaryService() {
  local SERVICE_NAME
  local SERVICE_COMMAND
  SERVICE_NAME=$1
  SERVICE_COMMAND=$2

  if [[ -f "./services/${SERVICE_NAME}/wrapper.sh" ]]; then
    (./services/${SERVICE_NAME}/wrapper.sh $SERVICE_COMMAND)
  else
    echo "service ${SERVICE_NAME} doesn't exist"
  fi
}

# TODO Probably don't need this for mobile
startServices() {
  # sets if services this procedure starts should be stopped automatically
  local AUTO_CLEANUP
  if [[ "auto" = $1 ]]; then
    AUTO_CLEANUP=true
  else
    AUTO_CLEANUP=false
  fi

  if [[ "all" = $1 ]]; then
    auxiliaryService orb start
  fi

  # TODO do we need to start a ledger for mobile? Maybe only if the Harness is starting an agent.
  # if we're *not* using an external VON ledger, start the local one
  if [[ -z ${LEDGER_URL_CONFIG} ]]; then
    if [[ -z `docker ps -q --filter="name=von_webserver_1"` ]]; then
      echo "starting local von-network..."
      auxiliaryService von-network start
      if [[ $AUTO_CLEANUP ]]; then
        export STARTED_LOCAL_LEDGER=true
      fi
    fi
  fi

  if ! waitForLedger; then
    echoRed "\nThe Indy Ledger is not running.\n"
    exit 1
  fi

  # if we're *not* using an external indy tails server, start the local one
  if [[ -z ${TAILS_SERVER_URL_CONFIG} ]]; then
    if [[ -z `docker ps -q --filter="name=docker_tails-server_1"` ]]; then
      echo "starting local indy-tails-server..."
      auxiliaryService indy-tails start
      if [[ $AUTO_CLEANUP ]]; then
        export STARTED_LOCAL_TAILS=true
      fi
    fi
  fi

  if ! waitForTailsServer; then
    echoRed "\nThe Indy Tails Server is not running.\n"
    exit 1
  fi
}

# TODO Probably din't need this for mobile
stopServices() {
  if [[ "auto" = $1 ]]; then
    if [[ ${STARTED_LOCAL_UNIRESOLVER} ]]; then
      echo "stopping local uniresolver..."
      auxiliaryService uniresolver stop
    fi

    if [[ ${STARTED_LOCAL_TAILS} ]]; then
      echo "stopping local indy-tails-server..."
      auxiliaryService indy-tails stop
    fi

    if [[ ${STARTED_LOCAL_LEDGER} ]]; then
      echo "stopping local von-network..."
      auxiliaryService von-network stop
    fi
  elif [[ "all" = $1 ]]; then
    auxiliaryService uniresolver stop
    auxiliaryService orb stop
    auxiliaryService indy-tails stop
    auxiliaryService von-network stop
  fi
}

# TODO Probably don't need this for mobile
serviceCommand() {
  local SERVICE_COMMAND
  SERVICE_COMMAND=$1
  local SERVICE_TARGET
  SERVICE_TARGET=$2

  # TODO: allow multiple services to be named - but can we handle logs command then?
#   if [[ "all" = $SERVICE_TARGET ]]; then
#     case "${SERVICE_COMMAND}" in
#       start)
#           createNetwork
#           startServices all
#         ;;
#       stop)
#           stopServices all
#           cleanupNetwork
#         ;;
#       *)
#           echo err: \'start\' and \'stop\' are only valid commands for target \'all\'
#         ;;
#     esac

#     return
#   fi

#   case "${SERVICE_COMMAND}" in
#     start)
#         createNetwork
#         auxiliaryService ${SERVICE_TARGET} ${SERVICE_COMMAND}
#       ;;
#     logs)
#         auxiliaryService ${SERVICE_TARGET} ${SERVICE_COMMAND}
#       ;;
#     stop|clean)
#         auxiliaryService ${SERVICE_TARGET} ${SERVICE_COMMAND}
#         cleanupNetwork
#       ;;
#     *)
#         auxiliaryService ${SERVICE_TARGET} ${SERVICE_COMMAND}
#       ;;
#   esac
}


startHarness(){
  echo Agents to be used:
  echo "  Issuer - ${ISSUER_AGENT}"
  echo "  Verfier - ${VERIFIER_AGENT}"
  echo "  Holder - ${APP_NAME}"
  echo ""

  createNetwork

  # startServices auto

  # TODO probably don't need this for Mobile
  dockerhost_url_templates

  #export ISSUER_AGENT=${ISSUER_AGENT:-${ISSUER}-agent}
  export ISSUER_AGENT=${ISSUER}-agent
  #export VERIFIER_AGENT=${VERIFIER_AGENT:-$VERIFIER}-agent}
  export VERIFIER_AGENT=${VERIFIER}-agent
  # export AIP_CONFIG=${AIP_CONFIG:-10}

  export PROJECT_ID=${PROJECT_ID:-general}

  # start agents or ...
  startAgent Issuer issuer_agent "$ISSUER_AGENT" "9020-9029" 9020 9021 "20" "$ISSUER"
  startAgent Verifier verifier_agent "$VERIFIER_AGENT" "9030-9039" 9030 9031 "20" "$VERIFIER"

  echo
  waitForAgent Issuer 9020
  waitForAgent Verifier 9030

  echo
  # config.json file handling
  modifyConfigJson

  echo
  # Allure Reports environment.properties file handling
  # Only do this if reporting parameter is passed. 
  if [[ "${REPORT}" = "allure" ]]; then
    writeEnvProperties
  fi
}

deleteAgents() {
    deleteAgent issuer_agent
    deleteAgent verifier_agent
}

deleteAgent() {
    agent=$1
    docker rm -f $agent || 1
}

runTests() {
  runArgs=${@}

  if [[ "${TAGS}" ]]; then
      echo "Tags: ${TAGS}"
  else
      echo "No tags specified; all tests will be run."
  fi

  echo
  # Behave.ini file handling
  export BEHAVE_INI_TMP="$(pwd)/behave.ini.tmp"
  cp ${BEHAVE_INI} ${BEHAVE_INI_TMP}

  echo "Running with Device Cloud Service ${DEVICE_CLOUD}"
  if [[ "${DEVICE_CLOUD}" = "SauceLabs" ]]; then
    # if Region is not set default to us-west-1
    if [[ -z ${SL_REGION} ]]; then
      export SL_REGION="us-west-1"
    fi
    if [[ "${REPORT}" = "allure" ]]; then
      echo "Executing tests with Allure Reports."
      ${terminalEmu} docker run ${INTERACTIVE} --rm --network="host" -v ${BEHAVE_INI_TMP}:/aries-mobile-tests/behave.ini -v "$(pwd)/aries-mobile-tests/allure/allure-results:/aries-mobile-test-harness/aries-mobile-tests/allure/allure-results/" -v "$(pwd)/aries-mobile-tests/config.json:/aries-mobile-test-harness/aries-mobile-tests/config.json" -e SAUCE_USERNAME=${DEVICE_CLOUD_USERNAME} -e SAUCE_ACCESS_KEY=${DEVICE_CLOUD_ACCESS_KEY} -e SL_REGION=${SL_REGION} aries-mobile-test-harness -k ${runArgs} -f allure_behave.formatter:AllureFormatter -o ./allure/allure-results -f progress -D Issuer=http://0.0.0.0:9022/ -D Verifier=http://0.0.0.0:9032/
    else
      echo "Executing tests without Allure Reports."
      ${terminalEmu} docker run ${INTERACTIVE} --rm --network="host" -v ${BEHAVE_INI_TMP}:/aries-mobile-tests/behave.ini -v "$(pwd)/aries-mobile-tests/config.json:/aries-mobile-test-harness/aries-mobile-tests/config.json" -e SAUCE_USERNAME=${DEVICE_CLOUD_USERNAME} -e SAUCE_ACCESS_KEY=${DEVICE_CLOUD_ACCESS_KEY} -e SL_REGION=${SL_REGION} aries-mobile-test-harness -k ${runArgs} -D Issuer=http://0.0.0.0:9022/ -D Verifier=http://0.0.0.0:9032/
    fi
  #else # place holder for other device cloud services like BrowserStack, etc.
  fi

  local docker_result=$?
  rm ${BEHAVE_INI_TMP}

  # Export agent logs
  mkdir -p .logs
  docker logs issuer_agent > .logs/issuer_agent.log
  # docker logs verifier_agent > .logs/verifier_agent.log

  if [[ "${USE_NGROK}" = "true" ]]; then
    docker logs issuer_agent-ngrok > .logs/issuer_agent-ngrok.log
  #   docker logs issuer_agent-ngrok > .logs/issuer_agent-ngrok.log
  fi
}

stopIfExists(){
  local CONTAINER_NAME
  CONTAINER_NAME=$1
  local CONTAINER_ID
  CONTAINER_ID=`docker ps -q --filter "name=${CONTAINER_NAME}"`

  if [[ ${CONTAINER_ID} ]]; then
    docker stop ${CONTAINER_ID} > /dev/null
  fi
}

stopHarness(){
  echo "Cleanup:"
  echo "  - Shutting down all the agents ..."
  docker stop issuer_agent verifier_agent > /dev/null
  docker rm -v issuer_agent verifier_agent > /dev/null

  stopIfExists issuer_agent-ngrok
  stopIfExists verifier_agent-ngrok

  printf "Done\n"

  stopServices auto

  cleanupNetwork

  if [ -n "${docker_result}" ] && [ ! "${docker_result}" = "0" ]; then
    echo "Exit with error code ${docker_result}"
    exit ${docker_result}
  fi
}

isAgent() {
  result=false

  for agent in ${VALID_AGENTS}; do
    if [[ "${1}" == "${agent}" ]]; then
        result=true
    fi
  done

  echo $result
}

printLetsEncryptWarning() {
  [ -n "${LetsEncryptWarningPrinted}" ] && return
  cat << EOWARN
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>> WARNING
>> This applies to mobile testing using Android-Based digital wallet,
>> as far as we know.

If you are using a mobile/smartphone-based Wallet, the test harness is going to
make use of the https://ngrok.com/ infrastructure, generating url like this one
https://aabbccdd.ngrok.io

The Ngrok infrastructure makes use of a wildcard TLS certificate *.ngrok.io,
certified by Let's Encrypt (https://letsencrypt.org/).
However, some OS and platform are still making use of an expired root
certificate, namely "DST Root CA X3", which expired on September 30th 2021.
Ref: https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021

If:
- The wallet your are testing somehow never manages to establish a
  connection after scanning the first QR code.
Then:
- you might be facing this issue.

The solution is to disable the expired certificate into your android device
trusted certificate store.

Here's how: Of course, your mileage might vary depending on brand and device:

* The simplest way is to launch your setting application
  a. Use the search bar to find "certificate"-related entries
     (you can probably use a shorter substring)
  b. This should display a few entries, including something like
    Trusted Certificates (or the equivalent in your phone language)
  c. Selecting this should display two list of trusted certificates:
    the System ones and the ones input by the user
  d. Go to the System list of trusted certificates, and simply find the
    DST Root CA X3 in the sorted list
  e. Click on the certificate and deactivate it.

* If the search does not work for you, we are aware of two alternate ways
  to access the trusted certificates store, but again we cannot document for
  all brand/models

  * Either:
    Settings
    => Biometrics & security
    => Other security settings
    => View security certificates
  * Or:
    Settings
    => Security
    => Advanced
    => Encryption and Credentials
    => Trusted Certificates
  * Then go to step b. above to disable the faulty certificate.

Now, if the faulty certificate is not is your trust store, then you have
another issue, sorry.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
EOWARN
LetsEncryptWarningPrinted=1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Command to run must be the first argument
COMMAND=$(toLower ${1})
shift

# Handle run args
if [[ "${COMMAND}" == "run" || "${COMMAND}" == "start" || "${COMMAND}" == "test" ]]; then
  ISSUER="none"
  VERIFIER="none"
  WALLET="none"
  TAGS=""
  BEHAVE_INI=aries-mobile-tests/behave.ini

  while getopts ":d:u:k:p:a:i:v:r:t:" FLAG; do
    case $FLAG in
      h ) usage ;;
      : ) usage ;;
      \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
          ;;
      r ) export REPORT=${OPTARG}
          ;;
      d ) export DEVICE_CLOUD=${OPTARG}
          ;;
      u ) export DEVICE_CLOUD_USERNAME=${OPTARG}
          ;;
      k ) export DEVICE_CLOUD_ACCESS_KEY=${OPTARG}
          ;;
      p ) export DEVICE_PLATFORM=${OPTARG}
          ;;
      a ) export APP_NAME=${OPTARG}
          export WALLET=${OPTARG}
          ;;
      i ) export ISSUER_AGENT=${OPTARG}
          export ISSUER=${OPTARG}
          ;;
      v ) export VERIFIER_AGENT=${OPTARG}
          export VERIFIER=${OPTARG}
          ;;
      t ) export TAGS="${TAGS} --tags=${OPTARG}"
          ;;
    esac
  done
  shift $((OPTIND-1))

  if [[ "${COMMAND}" == "run" || "${COMMAND}" == "test" ]]; then
    for agent in ${ISSUER_AGENT} ${VERIFIER_AGENT}; do
        if [[ $(isAgent $agent) == false ]] ; then
            echo All agents Issuer and Verifier must be set to one of: ${VALID_AGENTS}.
            echo Use \"${0} help\" to get more information.
            exit 1
        fi
    done

    if [ ! -f "${BEHAVE_INI}" ]; then
      echo Error - behave INI file does not exist: ${BEHAVE_INI}
      exit 1
    fi

    if [[ "$@" ]]; then
        echo "Other args:  $@"
    fi
  fi
fi

# Handle additional Build arguments
if [[ "${COMMAND}" == "build" || "${COMMAND}" == "rebuild" ]]; then

  # Get build commandline arguments 
  while getopts ":w:i:v:" FLAG; do
    case $FLAG in
        \? ) #unrecognized option - show help
        set -- "$@" "$FLAG"
            ;;
        w ) export WALLET_UNDER_TEST=${OPTARG}
            ;;
        i ) export ISSUER_AGENT=${OPTARG}
            ;;
        v ) export VERIFIER_AGENT=${OPTARG}
            ;;
        * ) usage ;;
    esac
  done

  shift $((OPTIND-1))

  # Determine what agents to build. Only build once if Issuer and Verifier are the same. 
  export BUILD_AGENTS="${BUILD_AGENTS} ${ISSUER_AGENT}"
  if [ "$ISSUER_AGENT" != "$VERIFIER_AGENT" ]; then
    export BUILD_AGENTS="${BUILD_AGENTS} ${VERIFIER_AGENT}"
  fi

  # TODO Check here to see if the wallet passed in is in the VALID_WALLETS list, if not, exit.
  if [ "$BUILD_AGENTS" == "" ]; then
     BUILD_AGENTS=${VALID_AGENTS}
  fi
  # echo "Wallet entered is not a valid wallet. See aries-mobile-test-harness/aries-mobile-tests/pageobjects/ for wallets"
  # echo "If your wallet is not in that location, add pageobjects for your wallet and place it in a directory of your wallet name."
  # exit 1

  # add the wallet steps to all_steps.py so that all steps are seen by behave. 
  # the format 
  # from steps.bifold.connect import *
  # is used for every file in the steps/wallet package.
  
  # check if steps/WALLET_UNDER_TEST exists, if not, report a bad wallet name.
  if [ -d "aries-mobile-tests/features/steps/${WALLET_UNDER_TEST}" ]; then
    # Are there any files in the steps/wallet folder?
    if [ "$(ls -A aries-mobile-tests/features/steps/${WALLET_UNDER_TEST}/)" ]; then
      echo "Adding an aries-mobile-tests/features/steps/all_steps.py for ${WALLET_UNDER_TEST}"
      FILES="aries-mobile-tests/features/steps/${WALLET_UNDER_TEST}/*.py"
      step_imports=""
      for f in $FILES
      do
        echo "Adding import for $f to aries-mobile-tests/features/steps/all_steps.py..."
        f_no_ext=${f%.*}
        step_imports="${step_imports}from steps.${WALLET_UNDER_TEST}.${f_no_ext##*/} import *"$'\n'
      done
      echo "$step_imports" > aries-mobile-tests/features/steps/all_steps.py
    else
      echo "Error: no steps defined in aries-mobile-tests/features/steps/${WALLET_UNDER_TEST}"
      exit 1
    fi
  else
    echo "Error: Invalid wallet name ${WALLET_UNDER_TEST}"
    echo "Wallet name needs to be one of"
    for i in $(ls -d aries-mobile-tests/features/steps/*/); do echo ${i%%/}; done
    exit 1
  fi

fi

pushd ${SCRIPT_HOME} >/dev/null

case "${COMMAND}" in
  build)
      buildImages ${@} --platform linux/amd64
    ;;

  rebuild)
      buildImages --no-cache ${@} --platform linux/amd64
    ;;

  run)
      startHarness
      echo ""
      runTests ${TAGS} ${@}
      echo ""
      stopHarness
    ;;
  start)
      startHarness
    ;;
  test)
      runTests ${TAGS} ${@}
    ;;
  stop)
      stopHarness
    ;;
  service)
      serviceCommand ${@}
    ;;
  tags)
      grep -h @ aries-mobile-tests/features/*feature |  tr " " "\n" | sort -u | fmt
    ;;
  rm)
      deleteAgents
    ;;

  tests|scenarios)
      grep -h -B 1 Scenario aries-mobile-tests/features/*feature
    ;;

  dockerhost)
      echo ${DOCKERHOST}
    ;;
  *)
      usage
    ;;

esac

popd > /dev/null
